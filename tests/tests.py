import cv2
from ultralytics import YOLO
import psutil
import torch
import time
import os

# URL RTSP de la c√°mara (reemplaza con la URL correcta)
rtsp_url = "rtsp://abuenov:ingdesonido@192.168.1.40:554/stream1"
# /stream1 para visualizaci√≥n dentro de la misma red.
# /stream2 para visualizaci√≥n remota.


def test_camera_conn():

    # Intenta abrir la conexi√≥n
    cap = cv2.VideoCapture(rtsp_url)

    # Evaluar
    if not cap.isOpened():
        print("‚ùå No se pudo conectar con la c√°mara.")
    else:
        print("‚úÖ Conexi√≥n exitosa con la c√°mara.")
        ret, frame = cap.read()
        if ret:
            print("‚úÖ Frame recibido correctamente.")
            # Puedes guardar una imagen si quieres verla despu√©s
            cv2.imwrite("test_frame.jpg", frame)
            print("üñºÔ∏è Imagen guardada como frame.jpg")
        else:
            print("‚ö†Ô∏è No se pudo leer un frame.")
        cap.release()


def test_yolo(threads: int):

    # Obtener el ID del proceso actual y limitar n√∫cleos
    if threads > 8:
        return print('No usar m√°s de 8 nucleos.')
    torch.set_num_threads(threads)
    torch.set_num_interop_threads(threads)
    p = psutil.Process(os.getpid())
    p.cpu_affinity([i for i in range(threads)])

    # Lectura de imagen
    model = YOLO("yolov8n.pt")
    p = os.path.join(os.path.dirname(__file__), 'data/person.jpg')
    frame = cv2.imread(p)

    # Solo detecci√≥n
    start = time.time()
    results = model(frame, classes=0, verbose=False)
    print("‚è±Ô∏è Detecci√≥n:", round(time.time() - start, 2), "s")

    # Detecci√≥n + tracking
    start = time.time()
    results = model.track(frame, classes=0, persist=True, verbose=False)
    print("‚è±Ô∏è Tracking:", round(time.time() - start, 2), "s")
